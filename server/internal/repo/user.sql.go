// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repo

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (emailSender,
                   password)
VALUES ($1, $2)
RETURNING id, emailSender, password, created_at, updated_at
`

type CreateUserParams struct {
	Email    string `json:"emailSender"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, emailSender, password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password, emailSender
FROM users
WHERE emailSender = $1
`

type GetUserByEmailRow struct {
	ID       int32  `json:"id"`
	Password string `json:"password"`
	Email    string `json:"emailSender"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Password, &i.Email)
	return i, err
}

const isEmailAvailable = `-- name: IsEmailAvailable :one
SELECT NOT EXISTS (SELECT 1
                   from users
                   WHERE emailSender = $1)
`

func (q *Queries) IsEmailAvailable(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isEmailAvailable, email)
	var not_exists bool
	err := row.Scan(&not_exists)
	return not_exists, err
}

const updatePasswordByEmail = `-- name: UpdatePasswordByEmail :one
UPDATE users
SET password = $1,
    updated_at    = $2
WHERE emailSender = $3
RETURNING id, emailSender, password, created_at, updated_at
`

type UpdatePasswordByEmailParams struct {
	Password  string    `json:"password"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"emailSender"`
}

func (q *Queries) UpdatePasswordByEmail(ctx context.Context, arg UpdatePasswordByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePasswordByEmail, arg.Password, arg.UpdatedAt, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set emailSender = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID    int32  `json:"id"`
	Email string `json:"emailSender"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Email)
	return err
}
